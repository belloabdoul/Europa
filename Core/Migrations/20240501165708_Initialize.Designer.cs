// <auto-generated />
using Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(SimilarityContext))]
    [Migration("20240501165708_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.File", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("id");

                    b.Property<Vector>("ImageHash")
                        .HasColumnType("vector")
                        .HasColumnName("image_hash");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Similarity", b =>
                {
                    b.Property<string>("HypotheticalOriginalId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hypothetical_original_id");

                    b.Property<string>("HypotheticalDuplicateId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hypothetical_duplicate_id");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.HasKey("HypotheticalOriginalId", "HypotheticalDuplicateId")
                        .HasName("pk_similarities");

                    b.HasIndex("HypotheticalDuplicateId")
                        .HasDatabaseName("ix_similarities_hypothetical_duplicate_id");

                    b.ToTable("similarities", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Similarity", b =>
                {
                    b.HasOne("Core.Entities.File", "HypotheticalDuplicate")
                        .WithMany("HypotheticalOriginals")
                        .HasForeignKey("HypotheticalDuplicateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_similarities_files_hypothetical_duplicate_id");

                    b.HasOne("Core.Entities.File", "HypotheticalOriginal")
                        .WithMany("HypotheticalDuplicates")
                        .HasForeignKey("HypotheticalOriginalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_similarities_files_hypothetical_original_id");

                    b.Navigation("HypotheticalDuplicate");

                    b.Navigation("HypotheticalOriginal");
                });

            modelBuilder.Entity("Core.Entities.File", b =>
                {
                    b.Navigation("HypotheticalDuplicates");

                    b.Navigation("HypotheticalOriginals");
                });
#pragma warning restore 612, 618
        }
    }
}
